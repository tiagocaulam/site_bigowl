---

import { searchPokemonCards, getCardImageAndPrice } from "../../utils/pokemonTcgApi.js";

// Função para converter dólar para real e arredondar para baixo
function dollarToReal(priceUsd) {
  const cotacao = 5.20; // valor do dólar, ajuste conforme necessário
  if (!priceUsd || isNaN(priceUsd)) return null;
  return Math.floor(priceUsd * cotacao);
}


const { name, number, set } = Astro.props;

let cardData = null;
let error = null;
let debugInfo = null;

try {
  // Busca carta pelo nome, número e set
  const query = `name:\"${name}\" set.name:\"${set}\" number:${number}`;
  const results = await searchPokemonCards(query);
  if (results.length === 0) {
    error = `Nenhuma carta encontrada para ${name} (${number}) no set ${set}.`;
  } else {
    cardData = getCardImageAndPrice(results[0]);
    debugInfo = results[0];
  }
} catch (e) {
  error = `Erro ao buscar cartas: ${e.message}`;
}
---

{error && <p style="color:red">{error}</p>}
{cardData && typeof cardData === 'object' && 'image' in cardData && 'price' in cardData ? (
  <div class="card" style="width: 100%; max-width: 230px; height: 390px; margin-bottom: 2rem; box-sizing: border-box; border: 1px solid #e5e7eb; border-radius: 12px; background: #fff; box-shadow: 0 2px 8px rgba(0,0,0,0.08); display: flex; flex-direction: column;">
    <div class="card-img-wrapper" style="width: 100%; height: 250px; display: flex; align-items: center; justify-content: center; padding: 10px; box-sizing: border-box; overflow: hidden;">
      {cardData.image && <img src={cardData.image} alt={`Carta de ${name}`} style="max-width: 100%; max-height: 100%; object-fit: contain; transition: transform 0.25s ease-in-out;" />}
    </div>
    <div class="card-body" style="padding: 0.75rem 1rem 1rem 1rem; display: flex; flex-direction: column; flex-grow: 1; justify-content: space-between; height: 140px;">
      <div class="card-content" style="flex-grow: 1;">
        <div class="card-title" style="font-size: 1rem; font-weight: 600; color: #111827; line-height: 1.4; min-height: 2.8em; margin-bottom: 0.5rem; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">{name}</div>
        <div class="card-details" style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem; flex-grow: 1;">
          <span class="card-price" style="font-size: 1.25rem; font-weight: 700; color: #d7263d;">
            {cardData.price ? `R$ ${dollarToReal(cardData.price)},00` : "Indisponível"}
          </span>
          <span class="card-estoque out-of-stock" style="font-size: 0.7rem; font-weight: 700; padding: 4px 10px; border-radius: 9999px; text-transform: uppercase; background: #f3f4f6; color: #d7263d;">Sem estoque</span>
        </div>
      </div>
      <div class="btn-comprar is-disabled" style="width:100%; background:#d7263d; color:#fff; border:none; border-radius:8px; padding:0.75rem 0; font-weight:700; font-size:1rem; cursor:not-allowed; display:flex; align-items:center; justify-content:center; gap:0.5rem; opacity:0.7; margin-top:0;">
        <svg class="icon-loja" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l1.5-6h15L21 9"/><path d="M3 9h18v2a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9z"/><path d="M16 13v6"/><path d="M8 13v6"/></svg>
        <span>Sem estoque</span>
      </div>
    </div>
  </div>
) : (
  <p>Carta não encontrada.</p>
)}
